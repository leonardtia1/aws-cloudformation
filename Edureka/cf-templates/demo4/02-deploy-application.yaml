AWSTemplateFormatVersion: "2010-09-09"
Mappings:
  RegionMap:
    us-east-1:
      "AMALINUX1": "ami-0080e4c5bc078760e"
      "AMALINUX2": "ami-01e3b8c3a51e88954"
    us-west-1:
      "AMALINUX1": "ami-0ec6517f6edbf8044"
      "AMALINUX2": "ami-0a16c82eb0cc3aad8"
    ap-south-1:
      "AMALINUX1": "ami-0ad42f4f66f6c1cc9"
      "AMALINUX2": "ami-09243352e7fc54770"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: VPC
        Parameters:
          - vpcCIDR
      - Label:
          default: Availability Zone Configuration
        Parameters:
          - az
          - azPublicSubnetCIDR
    ParameterLabels:
      vpcCIDR:
        default: CIDR
      az:
        default: Availability Zone
      azPublicSubnetCIDR:
        default: Public Subnet CIDR
Parameters:
  vpcCIDR:
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/16
    Default: 10.21.0.0/16
  az:
    Type: "AWS::EC2::AvailabilityZone::Name"
  azPublicSubnetCIDR:
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/24
    Default: 10.21.1.0/24
Resources:
  IAMRoleEc2Access:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Join ["-", [!Ref "AWS::StackName", "ec2", "s3", "role"]]
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
  s3accessinstanceprofile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref IAMRoleEc2Access
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref vpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: "default"
      Tags:
        - Key: Name
          Value: !Join ["", [!Ref "AWS::StackName", "-", "VPC"]]
  IGW:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["", [!Ref "AWS::StackName", "-", "IGW"]]
  GatewayAttach:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC
  pubsub:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Ref az
      CidrBlock: !Ref azPublicSubnetCIDR
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName", "public", "subnet"]]
  pubsubrt:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName", "public", "route table"]]
  pubsubpubroute:
    Type: "AWS::EC2::Route"
    DependsOn: GatewayAttach
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref pubsubrt
  pubsubrta:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref pubsubrt
      SubnetId: !Ref pubsub
  EC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and SSH access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: "182.156.143.123/32"
          Description: Allow SSH access
        - IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "182.156.145.156/32"
          Description: Allow HTTP access
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName", "ec2", "sec", "grp"]]
  EC2:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: "1" #Expecting 1 signal from this resource within 5 minutes
        Timeout: PT5M
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX1]
      InstanceType: t2.micro
      SubnetId: !Ref pubsub
      KeyName: faultoluseast1
      SecurityGroupIds:
        - !Ref EC2SG
      IamInstanceProfile: !Ref s3accessinstanceprofile
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash
          yum update -y aws-cfn-bootstrap 
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2 --configsets setupjumpbox --region ${AWS::Region}                        
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2 --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName", "EC2", "php", "app"]]
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          setupjumpbox:
            - "configureCFN"
            - "installwww"
            - "configApp"
        configureCFN:
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2 --configsets setupjumpbox --region ${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        installwww:
          packages:
            yum:
              httpd: []
              php: []
              php-mysql: []
              php-pecl-memcached: []
          services:
            sysvinit:
              httpd:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/var/www/html"
        configApp:
          sources:
            /home/ec2-user/phpapp:
              !Join [
                "",
                ["http://s3.amazonaws.com/", <bucket-name>, <key-name>],
              ]
          commands:
            01_install_composer:
              cwd: "/home/ec2-user/phpapp"
              command: !Sub |
                chmod 777 /home/ec2-user/phpapp
                chmod 777 `ls *.php` `ls *.png` `ls *.json`
                export COMPOSER_HOME="/home/ec2-user/phpapp"
                curl -sS https://getcomposer.org/installer | php
                php composer.phar install
                cp *.php /var/www/html/
                cp -r vendor/ /var/www/html/
                cp aws-icon.png /var/www/html/
            02_access:
              cwd: "/var/www/html"
              command: "chmod 644 `ls *.php` `ls *.png`"
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: "S3"
          buckets:
            - <bucket-name>
          roleName: !Ref IAMRoleEc2Access
Outputs:
  vpcid:
    Description: ID of Shared Infrastructure VPC
    Value: !Ref VPC
  az:
    Description: AZ
    Value: !Ref az
  pubsub:
    Description: Public Subnet
    Value: !Ref pubsub
  ec2pubIp:
    Description: Public IP address of EC2 instance
    Value: !GetAtt EC2.PublicIp
  ec2pvtIp:
    Description: Private IP address of EC2 instance
    Value: !GetAtt EC2.PrivateIp
